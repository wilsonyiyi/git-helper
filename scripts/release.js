#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

const packagePath = path.join(__dirname, '..', 'package.json');
const package = JSON.parse(fs.readFileSync(packagePath, 'utf8'));

// È¢úËâ≤ËæìÂá∫
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m'
};

function colorLog(color, message) {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function execCommand(command, options = {}) {
  try {
    const result = execSync(command, { 
      encoding: 'utf8', 
      stdio: options.silent ? 'pipe' : 'inherit',
      ...options 
    });
    return result?.trim();
  } catch (error) {
    colorLog('red', `‚ùå ÂëΩ‰ª§ÊâßË°åÂ§±Ë¥•: ${command}`);
    colorLog('red', error.message);
    process.exit(1);
  }
}

function prompt(question) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      rl.close();
      resolve(answer);
    });
  });
}

async function preReleaseChecks() {
  colorLog('cyan', 'üîç ÊâßË°åÂèëÂ∏ÉÂâçÊ£ÄÊü•...');

  // Ê£ÄÊü•ÊòØÂê¶Âú® git ‰ªìÂ∫ì‰∏≠
  try {
    execCommand('git status', { silent: true });
  } catch {
    colorLog('red', '‚ùå ÂΩìÂâçÁõÆÂΩï‰∏çÊòØ Git ‰ªìÂ∫ì');
    process.exit(1);
  }

  // Ê£ÄÊü•Â∑•‰ΩúÂå∫ÊòØÂê¶Âπ≤ÂáÄ
  const status = execCommand('git status --porcelain', { silent: true });
  if (status) {
    colorLog('red', '‚ùå Â∑•‰ΩúÂå∫ÊúâÊú™Êèê‰∫§ÁöÑÊõ¥ÊîπÔºåËØ∑ÂÖàÊèê‰∫§ÊàñÊöÇÂ≠ò');
    console.log(status);
    process.exit(1);
  }

  // Ê£ÄÊü•ÊòØÂê¶Âú®‰∏ªÂàÜÊîØ
  const currentBranch = execCommand('git branch --show-current', { silent: true });
  if (currentBranch !== 'master' && currentBranch !== 'main') {
    const answer = await prompt(`‚ö†Ô∏è  ÂΩìÂâçÂú®ÂàÜÊîØ "${currentBranch}"ÔºåÂª∫ËÆÆÂú®‰∏ªÂàÜÊîØÂèëÂ∏É„ÄÇÊòØÂê¶ÁªßÁª≠Ôºü (y/N): `);
    if (answer.toLowerCase() !== 'y') {
      colorLog('yellow', 'Â∑≤ÂèñÊ∂àÂèëÂ∏É');
      process.exit(0);
    }
  }

  // Ê£ÄÊü•ËøúÁ®ã‰ªìÂ∫ìËøûÊé•
  try {
    execCommand('git fetch --dry-run', { silent: true });
  } catch {
    colorLog('red', '‚ùå Êó†Ê≥ïËøûÊé•Âà∞ËøúÁ®ã‰ªìÂ∫ì');
    process.exit(1);
  }

  // Ê£ÄÊü•ÊòØÂê¶ÊúâÊú™Êé®ÈÄÅÁöÑÊèê‰∫§
  try {
    const unpushed = execCommand('git log @{u}..HEAD --oneline', { silent: true });
    if (unpushed) {
      colorLog('yellow', '‚ö†Ô∏è  ÊúâÊú™Êé®ÈÄÅÁöÑÊèê‰∫§Ôºö');
      console.log(unpushed);
      const answer = await prompt('ÊòØÂê¶ÂÖàÊé®ÈÄÅËøô‰∫õÊèê‰∫§Ôºü (Y/n): ');
      if (answer.toLowerCase() !== 'n') {
        execCommand('git push');
      }
    }
  } catch {
    colorLog('yellow', '‚ö†Ô∏è  Êó†Ê≥ïÊ£ÄÊü•ËøúÁ®ãÂàÜÊîØÁä∂ÊÄÅ');
  }

  colorLog('green', '‚úÖ ÂèëÂ∏ÉÂâçÊ£ÄÊü•ÈÄöËøá');
}

async function selectReleaseType() {
  colorLog('cyan', '\nüìã ËØ∑ÈÄâÊã©ÂèëÂ∏ÉÁ±ªÂûã:');
  console.log('1. patch (1.0.0 -> 1.0.1) - ‰øÆÂ§çbug');
  console.log('2. minor (1.0.0 -> 1.1.0) - Êñ∞ÂäüËÉΩ');
  console.log('3. major (1.0.0 -> 2.0.0) - Á†¥ÂùèÊÄßÊõ¥Êîπ');
  console.log('4. beta  (1.0.0 -> 1.0.1-beta.0) - ÊµãËØïÁâàÊú¨');
  console.log('5. Ëá™ÂÆö‰πâÁâàÊú¨Âè∑');

  const choice = await prompt('\nËØ∑ËæìÂÖ•ÈÄâÊã© (1-5): ');

  switch (choice) {
    case '1':
      return 'patch';
    case '2':
      return 'minor';
    case '3':
      return 'major';
    case '4':
      return 'prerelease';
    case '5':
      const customVersion = await prompt('ËØ∑ËæìÂÖ•ÁâàÊú¨Âè∑ (‰æãÂ¶Ç: 1.2.3): ');
      return customVersion;
    default:
      colorLog('red', '‚ùå Êó†ÊïàÈÄâÊã©');
      process.exit(1);
  }
}

function updateVersion(releaseType) {
  colorLog('cyan', `\nüìù Êõ¥Êñ∞ÁâàÊú¨Âè∑ (${releaseType})...`);
  
  if (['patch', 'minor', 'major', 'prerelease'].includes(releaseType)) {
    const versionCommand = releaseType === 'prerelease' 
      ? 'npm version prerelease --preid=beta'
      : `npm version ${releaseType}`;
    
    const newVersion = execCommand(versionCommand, { silent: true });
    colorLog('green', `‚úÖ ÁâàÊú¨Â∑≤Êõ¥Êñ∞‰∏∫: ${newVersion}`);
    return newVersion;
  } else {
    // Ëá™ÂÆö‰πâÁâàÊú¨Âè∑
    execCommand(`npm version ${releaseType}`);
    colorLog('green', `‚úÖ ÁâàÊú¨Â∑≤Êõ¥Êñ∞‰∏∫: ${releaseType}`);
    return releaseType;
  }
}

async function generateChangelog() {
  colorLog('cyan', '\nüìã ÁîüÊàêÊõ¥Êñ∞Êó•Âøó...');
  
  try {
    // Ëé∑ÂèñÊúÄÊñ∞ÁöÑ tag
    const latestTag = execCommand('git describe --tags --abbrev=0', { silent: true });
    const commits = execCommand(`git log ${latestTag}..HEAD --oneline`, { silent: true });
    
    if (commits) {
      colorLog('blue', '\nüìÑ Êú¨Ê¨°ÂèëÂ∏ÉÂåÖÂê´ÁöÑÊõ¥Êîπ:');
      console.log(commits);
      
      const addToChangelog = await prompt('\nÊòØÂê¶Ê∑ªÂä†Âà∞ CHANGELOG.mdÔºü (Y/n): ');
      if (addToChangelog.toLowerCase() !== 'n') {
        // ËøôÈáåÂèØ‰ª•ÂÆûÁé∞Ëá™Âä®ÁîüÊàê CHANGELOG ÁöÑÈÄªËæë
        colorLog('blue', 'üí° ÊèêÁ§∫: ÊÇ®ÂèØ‰ª•ÊâãÂä®Êõ¥Êñ∞ CHANGELOG.md');
      }
    }
  } catch {
    colorLog('yellow', '‚ö†Ô∏è  Êó†Ê≥ïÁîüÊàêÊõ¥Êñ∞Êó•ÂøóÔºàÂèØËÉΩÊòØÈ¶ñÊ¨°ÂèëÂ∏ÉÔºâ');
  }
}

async function publishToNpm(isPrerelease = false) {
  colorLog('cyan', '\nüì¶ ÂèëÂ∏ÉÂà∞ NPM...');
  
  // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁôªÂΩï npm
  try {
    const whoami = execCommand('npm whoami', { silent: true });
    colorLog('blue', `üìù ÂΩìÂâç NPM Áî®Êà∑: ${whoami}`);
  } catch {
    colorLog('red', '‚ùå ËØ∑ÂÖàÁôªÂΩï NPM: npm login');
    process.exit(1);
  }

  // Á°ÆËÆ§ÂèëÂ∏É
  const currentVersion = package.version;
  const publishCommand = isPrerelease ? 'npm publish --tag beta' : 'npm publish';
  
  const confirm = await prompt(`\nÁ°ÆËÆ§ÂèëÂ∏ÉÁâàÊú¨ ${currentVersion} Âà∞ NPMÔºü (y/N): `);
  if (confirm.toLowerCase() !== 'y') {
    colorLog('yellow', 'Â∑≤ÂèñÊ∂àÂèëÂ∏É');
    process.exit(0);
  }

  // ÊâßË°åÂèëÂ∏É
  execCommand(publishCommand);
  colorLog('green', `‚úÖ ÊàêÂäüÂèëÂ∏ÉÂà∞ NPM: ${package.name}@${currentVersion}`);
}

async function postReleaseActions(version, isPrerelease) {
  colorLog('cyan', '\nüéâ ÊâßË°åÂèëÂ∏ÉÂêéÊìç‰Ωú...');

  // Êé®ÈÄÅ tags
  execCommand('git push --tags');
  
  if (!isPrerelease) {
    colorLog('blue', '\nüìã ÂèëÂ∏ÉÂêéÂª∫ËÆÆ:');
    console.log('1. Ê£ÄÊü• NPM ÂåÖÈ°µÈù¢: https://www.npmjs.com/package/' + package.name);
    console.log('2. Êõ¥Êñ∞È°πÁõÆÊñáÊ°£');
    console.log('3. Âú® GitHub ÂàõÂª∫ Release');
    console.log('4. ÈÄöÁü•Âõ¢ÈòüÊàêÂëòÊñ∞ÁâàÊú¨ÂèëÂ∏É');
    
    const createGitHubRelease = await prompt('\nÊòØÂê¶Âú® GitHub ÂàõÂª∫ ReleaseÔºü (y/N): ');
    if (createGitHubRelease.toLowerCase() === 'y') {
      colorLog('blue', 'üí° ËØ∑ËÆøÈóÆ: ' + (package.repository?.url || 'GitHub‰ªìÂ∫ì') + '/releases/new');
    }
  }

  colorLog('green', '\nüéä ÂèëÂ∏ÉÂÆåÊàêÔºÅ');
  colorLog('blue', `üì¶ ÁâàÊú¨: ${version}`);
  colorLog('blue', `üîó NPM: https://www.npmjs.com/package/${package.name}`);
}

async function main() {
  try {
    colorLog('magenta', 'üöÄ ÂºÄÂßãÂèëÂ∏ÉÊµÅÁ®ã...\n');
    
    // ÂèëÂ∏ÉÂâçÊ£ÄÊü•
    await preReleaseChecks();
    
    // ÈÄâÊã©ÂèëÂ∏ÉÁ±ªÂûã
    const releaseType = await selectReleaseType();
    const isPrerelease = releaseType === 'prerelease' || releaseType.includes('beta');
    
    // Êõ¥Êñ∞ÁâàÊú¨Âè∑
    const newVersion = updateVersion(releaseType);
    
    // ÁîüÊàêÊõ¥Êñ∞Êó•Âøó
    await generateChangelog();
    
    // ÂèëÂ∏ÉÂà∞ NPM
    await publishToNpm(isPrerelease);
    
    // ÂèëÂ∏ÉÂêéÊìç‰Ωú
    await postReleaseActions(newVersion, isPrerelease);
    
  } catch (error) {
    colorLog('red', `‚ùå ÂèëÂ∏ÉÂ§±Ë¥•: ${error.message}`);
    process.exit(1);
  }
}

// Â§ÑÁêÜÂëΩ‰ª§Ë°åÂèÇÊï∞
const args = process.argv.slice(2);
if (args.includes('--help') || args.includes('-h')) {
  console.log(`
Git Helper Release Script

Áî®Ê≥ï:
  node scripts/release.js [ÈÄâÈ°π]

ÈÄâÈ°π:
  --help, -h     ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ
  --patch        Áõ¥Êé•ÂèëÂ∏É patch ÁâàÊú¨
  --minor        Áõ¥Êé•ÂèëÂ∏É minor ÁâàÊú¨  
  --major        Áõ¥Êé•ÂèëÂ∏É major ÁâàÊú¨
  --beta         Áõ¥Êé•ÂèëÂ∏É beta ÁâàÊú¨

Á§∫‰æã:
  node scripts/release.js           # ‰∫§‰∫íÂºèÂèëÂ∏É
  node scripts/release.js --patch   # Áõ¥Êé•ÂèëÂ∏ÉË°•‰∏ÅÁâàÊú¨
  node scripts/release.js --beta    # Áõ¥Êé•ÂèëÂ∏ÉÊµãËØïÁâàÊú¨
  `);
  process.exit(0);
}

// Â§ÑÁêÜÂø´Êç∑ÂëΩ‰ª§
if (args.includes('--patch')) {
  (async () => {
    await preReleaseChecks();
    updateVersion('patch');
    await publishToNpm();
    await postReleaseActions('patch', false);
  })();
} else if (args.includes('--minor')) {
  (async () => {
    await preReleaseChecks();
    updateVersion('minor');
    await publishToNpm();
    await postReleaseActions('minor', false);
  })();
} else if (args.includes('--major')) {
  (async () => {
    await preReleaseChecks();
    updateVersion('major');
    await publishToNpm();
    await postReleaseActions('major', false);
  })();
} else if (args.includes('--beta')) {
  (async () => {
    await preReleaseChecks();
    updateVersion('prerelease');
    await publishToNpm(true);
    await postReleaseActions('prerelease', true);
  })();
} else {
  // ‰∫§‰∫íÂºèÊ®°Âºè
  main();
}